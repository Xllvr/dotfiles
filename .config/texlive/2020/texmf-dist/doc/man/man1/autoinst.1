.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AUTOINST 1"
.TH AUTOINST 1 "2020-05-11" "fontools" "Marc Penninga"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
autoinst \- wrapper around the LCDF TypeTools,
for installing and using OpenType fonts in LaTeX.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBautoinst\fR [\fIoptions\fR] \fBfont(s)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Eddie Kohler's \fI\s-1LCDF\s0 TypeTools\fR are superb tools for installing
OpenType fonts in LaTeX, but they can be hard to use:
they need many, often long, command lines
and don't generate the \fIfd\fR and \fIsty\fR files LaTeX needs.
\&\fBautoinst\fR simplifies the use of the \fITypeTools\fR for font installation
by generating and executing all commands for \fIotftotfm\fR
and by creating and installing all necessary \fIfd\fR and \fIsty\fR files.
.PP
Given a family of font files (in \fIotf\fR or \fIttf\fR format),
\&\fBautoinst\fR will create several LaTeX font families:
.RS 2
.IP "\-" 3
Four text families (with lining and oldstyle digits,
each in both tabular and proportional variants),
all with the following shapes:
.RS 3
.RS 2
.IP "\fIn\fR" 8
.IX Item "n"
Roman (i.e., upright) text
.IP "\fIit\fR, \fIsl\fR" 8
.IX Item "it, sl"
Italic and slanted (sometimes called oblique) text
.IP "\fIsc\fR" 8
.IX Item "sc"
Small caps
.IP "\fIscit\fR, \fIscsl\fR" 8
.IX Item "scit, scsl"
Italic and slanted small caps
.IP "\fIsw\fR" 8
.IX Item "sw"
Swash
.IP "\fInw\fR" 8
.IX Item "nw"
\&\*(L"Upright swash\*(R"
.RE
.RS 2
.RE
.RE
.RS 3
.RE
.IP "\-" 3
For each T1\-encoded text family:
a family of TS1\-encoded symbol fonts, in roman, italic and slanted shapes.
.IP "\-" 3
Families with superiors, inferiors, numerators and denominators,
in roman, italic and slanted shapes.
.IP "\-" 3
Families with \*(L"Titling\*(R" characters;
these \*(L"... replace the default glyphs
with corresponding forms designed specifically for titling.
These may be all-capital and/or larger on the body,
and adjusted for viewing at larger sizes\*(R"
(according to the OpenType Specification).
.IP "\-" 3
An ornament family, also in roman, italic and slanted shapes.
.RE
.RS 2
.RE
.PP
Of course, if your fonts don't contain italics, oldstyle digits, small caps
etc., the corresponding shapes and families are not created.
In addition, the creation of most families and shapes can be controlled
by the user (see \*(L"COMMAND-LINE \s-1OPTIONS\*(R"\s0 below).
.PP
These families use the \fIFontPro\fR project's naming scheme:
\&\fI<FontFamily>\-<Suffix>\fR, where \fI<Suffix>\fR is:
.IP "\fI\s-1LF\s0\fR" 8
.IX Item "LF"
proportional (i.e., figures have varying widths) lining figures
.IP "\fI\s-1TLF\s0\fR" 8
.IX Item "TLF"
tabular (i.e., all figures have the same width) lining figures
.IP "\fIOsF\fR" 8
.IX Item "OsF"
proportional oldstyle figures
.IP "\fITOsF\fR" 8
.IX Item "TOsF"
tabular oldstyle figures
.IP "\fISup\fR" 8
.IX Item "Sup"
superior characters (note that most fonts have only an incomplete set of
superior characters: digits, some punctuation and the letters \fIabdeilmnorst\fR;
normal forms are used for other characters)
.IP "\fIInf\fR" 8
.IX Item "Inf"
inferior characters; usually only digits and some punctuation,
normal forms for other characters
.IP "\fITitl\fR" 8
.IX Item "Titl"
Titling characters; see above.
.IP "\fIOrn\fR" 8
.IX Item "Orn"
ornaments
.IP "\fINumr\fR" 8
.IX Item "Numr"
numerators
.IP "\fIDnom\fR" 8
.IX Item "Dnom"
denominators
.PP
The individual fonts are named \fI<FontName>\-<suffix>\-<shape>\-<enc>\fR,
where \fI<suffix>\fR is the same as above (but in lowercase),
\&\fI<shape>\fR is either empty, \*(L"sc\*(R" or \*(L"swash\*(R",
and \fI<enc>\fR is the encoding (also in lowercase).
A typical name in this scheme would be \*(L"FiraSans\-Light\-osf\-sc\-ly1\*(R".
.SS "About the log file"
.IX Subsection "About the log file"
\&\fBautoinst\fR writes some info about what it thinks it's doing to a log file.
By default this is called \fI<fontfamily>.log\fR,
but this choice can be overridden by the user;
see the \fI\-logfile\fR command-line option in \*(L"COMMAND-LINE \s-1OPTIONS\*(R"\s0 below.
If this log file already exists, \fBautoinst\fR will append its data to the end
rather than overwrite it.
Use the \fI\-verbose\fR command-line option to ask for more detailed info.
.SS "A note for MiKTeX users"
.IX Subsection "A note for MiKTeX users"
Automatically installing the fonts into a suitable \s-1TEXMF\s0 tree
(as \fBautoinst\fR tries to do by default) only works for TeX-installations
that use the \fIkpathsea\fR library; with TeX distributions that implement
their own directory searching (such as MiKTeX), \fBautoinst\fR will complain
that it cannot find the \fIkpsewhich\fR program and move all generated files
into a subdirectory \f(CW\*(C`./autoinst_output/\*(C'\fR of the current directory.
If you use such a TeX distribution, you should either move these files
to their correct destinations by hand, or use the \fI\-target\fR option
(see \*(L"COMMAND-LINE \s-1OPTIONS\*(R"\s0 below) to manually specify a \s-1TEXMF\s0 tree.
.PP
Also, some OpenType fonts contain so many kerning pairs that the resulting
\&\fIpl\fR and \fIvpl\fR files are too big for MiKTeX's \fIpltotf\fR and \fIvptovf\fR;
the versions that come with W32TeX (\fIhttp://www.w32tex.org\fR)
and TeXLive (\fIhttp://tug.org/texlive\fR) don't seem to have this problem.
.SS "A note for MacTeX users"
.IX Subsection "A note for MacTeX users"
By default, \fBautoinst\fR will try to install all generated files into
the \f(CW$TEXMFLOCAL\fR tree; when this directory isn't user-writable,
it will use the \f(CW$TEXMFHOME\fR tree instead.  Unfortunately, MacTeX's version
of \f(CW\*(C`updmap\-sys\*(C'\fR (which is called behind the scenes) doesn't search
in \f(CW$TEXMFHOME\fR, and hence MacTeX will not find the new fonts.
.PP
To remedy this, either run \fBautoinst\fR as root (so that it can install
everything into \f(CW$TEXMFLOCAL\fR) or manually run \f(CW\*(C`updmap \-user\*(C'\fR to tell
TeX about the files in \f(CW$TEXMFHOME\fR.
The latter option does, however, have some caveats;
see \fIhttps://tug.org/texlive/scripts\-sys\-user.html\fR.
.SS "Using the fonts in your LaTeX documents"
.IX Subsection "Using the fonts in your LaTeX documents"
\&\fBautoinst\fR generates a style file for using the fonts in LaTeX documents,
named \fI<FontFamily>.sty\fR. This style file also takes care of loading
the \fIfontenc\fR and \fItextcomp\fR packages.
To use the fonts, add the command \f(CW\*(C`\eusepackage{\f(CI<FontFamily>\f(CW}\*(C'\fR
to the preamble of your document.
.PP
This style file defines a number of options:
.ie n .IP """mainfont""" 4
.el .IP "\f(CWmainfont\fR" 4
.IX Item "mainfont"
Redefine \f(CW\*(C`\efamilydefault\*(C'\fR to make this font the main font
for the document.
This is a no-op if the font is installed as a serif font;
but if the font is installed as a sanserif or typewriter font,
this option saves you from having to redefine \f(CW\*(C`\efamilydefault\*(C'\fR
yourself.
.ie n .IP """lining"", ""oldstyle"", ""tabular"", ""proportional""" 4
.el .IP "\f(CWlining\fR, \f(CWoldstyle\fR, \f(CWtabular\fR, \f(CWproportional\fR" 4
.IX Item "lining, oldstyle, tabular, proportional"
Choose which figure style to use.
The defaults are \*(L"oldstyle\*(R" and \*(L"proportional\*(R" (if available).
.ie n .IP """scale=\fI<number>\fP""" 4
.el .IP "\f(CWscale=\f(CI<number>\f(CW\fR" 4
.IX Item "scale=<number>"
Scale the font by a factor of \fI<number>\fR.
E.g., to increase the size of the font by 5%, use
\&\f(CW\*(C`\eusepackage[scale=1.05]{\f(CI<FontFamily>\f(CW}\*(C'\fR.
May also be spelled \f(CW\*(C`scaled\*(C'\fR.
.Sp
This option is only available when you have the \fIxkeyval\fR package installed.
.ie n .IP """medium"", ""book"", ""text"", ""regular""" 4
.el .IP "\f(CWmedium\fR, \f(CWbook\fR, \f(CWtext\fR, \f(CWregular\fR" 4
.IX Item "medium, book, text, regular"
Select the weight that LaTeX will use as the \*(L"regular\*(R" weight;
the default is \f(CW\*(C`regular\*(C'\fR.
.ie n .IP """heavy"", ""black"", ""extrabold"", ""demibold"", ""semibold"", ""bold""" 4
.el .IP "\f(CWheavy\fR, \f(CWblack\fR, \f(CWextrabold\fR, \f(CWdemibold\fR, \f(CWsemibold\fR, \f(CWbold\fR" 4
.IX Item "heavy, black, extrabold, demibold, semibold, bold"
Select the weight that LaTeX will use as the \*(L"bold\*(R" weight;
the default is \f(CW\*(C`bold\*(C'\fR.
.PP
The previous two groups of options will only work if
you have the \fImweights\fR package installed.
.PP
The style file will also try to load the \fIfontaxes\fR package
(on \s-1CTAN\s0), which gives easy access to various font shapes and styles.
Using the machinery set up by \fIfontaxes\fR, the generated style file
defines a number of commands (which take the text to be typeset as argument)
and declarations (which don't take arguments, but affect all text up to
the end of the current group) to access titling, superior and inferior
characters:
.PP
.Vb 1
\&    DECLARATION     COMMAND         SHORT FORM OF COMMAND
\&
\&    \etlshape        \etexttitling    \etexttl
\&    \esufigures      \etextsuperior   \etextsu
\&    \einfigures      \etextinferior   \etextin
.Ve
.PP
In addition, the \f(CW\*(C`\eswshape\*(C'\fR and \f(CW\*(C`\etextsw\*(C'\fR commands are redefined to place
swash on \fIfontaxes\fR' secondary shape axis (\fIfontaxes\fR places it on the
primary shape axis) to make them behave properly when nested, so that
\&\f(CW\*(C`\eswshape\eupshape\*(C'\fR will give upright swash.
.PP
There are no commands for accessing the numerator and denominator
fonts; these can be selected using \fIfontaxes\fR' standard commands,
e.g., \f(CW\*(C`\efontfigurestyle{numerator}\eselectfont\*(C'\fR.
.PP
These commands are only generated for existing shapes and number styles;
no commands are generated for shapes and styles that don't exist,
or whose generation was turned off by the user.
Also these commands are built on top of \fIfontaxes\fR, so if that package
cannot be found, you're limited to using the lower-level commands from
standard \s-1NFSS\s0 (\f(CW\*(C`\efontfamily\*(C'\fR, \f(CW\*(C`\efontseries\*(C'\fR, \f(CW\*(C`\efontshape\*(C'\fR etc.).
.PP
By default, \fBautoinst\fR generates text fonts with \s-1OT1, LY1\s0 and T1
encodings, and the generated style files use T1 as the default text encoding.
Other encodings can be chosen using the \fI\-encoding\fR option
(see \*(L"COMMAND-LINE \s-1OPTIONS\*(R"\s0 below).
.PP
\fIOrnaments\fR
.IX Subsection "Ornaments"
.PP
Ornament fonts are regular LY1\-encoded fonts, with a number of
\&'regular' characters replaced by ornament glyphs.
The OpenType specification says that fonts should only put their
ornaments in place of the lowercase \s-1ASCII\s0 letters or the 'bullet'
character, but some fonts put them in other positions (such as those
of the digits) as well.
.PP
Ornament glyphs can be accessed like \f(CW\*(C`{\eornaments abc}\*(C'\fR and
\&\f(CW\*(C`{\eornaments\echar"61}\*(C'\fR, or equivalently
\&\f(CW\*(C`\etextornaments{abc}\*(C'\fR and \f(CW\*(C`\etextornaments{\echar"61}\*(C'\fR.
To see which ornaments a font contains (and at which positions),
run LaTeX on the file \fInfssfont.tex\fR (which is included in any
standard LaTeX installation), supply the name of the ornament font
(i.e., \f(CW\*(C`GaramondLibre\-Regular\-orn\-u\*(C'\fR) and say \f(CW\*(C`\etable\ebye\*(C'\fR;
this will create a table of all glyphs in that font.
.PP
Note that versions of \fBautoinst\fR up to 20200428 handled ornaments
differently, and fonts and style files generated by those versions
are not compatible with files generated by newer versions.
.SS "\s-1NFSS\s0 codes"
.IX Subsection "NFSS codes"
LaTeX's New Font Selection System (\s-1NFSS\s0)
identifies fonts by a combination of family,
series (the concatenation of weight and width), shape and size.
\&\fBautoinst\fR parses the font's metadata
(more precisely: the output of \f(CW\*(C`otfinfo \-\-info\*(C'\fR)
to determine these parameters.
When this fails (usually because the font family contains uncommon weights,
widths or shapes),
\&\fBautoinst\fR ends up with different fonts having the \fIsame\fR values
for these font parameters; such fonts cannot be used in \s-1NFSS,\s0
since there's no way distinguish them.
When \fBautoinst\fR detects such a situation, it will print an error message
and abort.
If that happens, either rerun \fBautoinst\fR on a smaller set of fonts,
or add the missing widths, weights and shapes to the tables \f(CW\*(C`WIDTH\*(C'\fR,
\&\f(CW\*(C`WEIGHT\*(C'\fR and \f(CW\*(C`SHAPE\*(C'\fR in the source code.
Please also send a bug report (see \s-1AUTHOR\s0 below).
.PP
The mapping of shapes to \s-1NFSS\s0 codes is done using the following table:
.PP
.Vb 5
\&    SHAPE                               CODE
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-
\&    Roman, Upright                      n
\&    Italic                              it
\&    Oblique, Slant(ed), Incline(d)      sl
.Ve
.PP
(\fIException:\fR Adobe Silentium Pro contains two Roman shapes;
we map the first of these to \*(L"n\*(R", for the second one we (ab)use the \*(L"it\*(R" code
as this family doesn't contain an Italic shape.)
.PP
The mapping of weights and widths to \s-1NFSS\s0 codes is a more complex,
two-step proces.
In the first step, all fonts are assigned a \*(L"series\*(R" name that is simply
the concatenation of its weight and width
(after expanding any abbreviations and converting to lowercase).
A font with \*(L"Cond\*(R" width and \*(L"Ultra\*(R" weight will then be known
as \*(L"ultrablackcondensed\*(R".
.PP
In the second step, \fBautoinst\fR tries to map all combinations of \s-1NFSS\s0 codes
(ul, el, l, sl, m, sb, b, eb and ub for weights;
uc, ec, c, sc, m, sx, x, ex and ux for widths) to actual fonts.
Of course, not all 81 combinations of these \s-1NFSS\s0 weights and widths will map
to existing fonts;
and conversely it may not be possible to assign every existing font
a unique code in a sane way (especially for the weights, some font families
offer more choices or finer granularity than \s-1NFSS\s0's codes can handle;
e.g., Fira Sans contains fifteen(!) different weights,
including an additional \*(L"Medium\*(R" weight between Regular and Semibold).
.PP
\&\fBautoinst\fR tries hard to ensure that the most common \s-1NFSS\s0 codes
(and high-level commands such as \f(CW\*(C`\ebfseries\*(C'\fR,
which are built on top of those codes) will \*(L"just work\*(R".
.PP
To see exactly which \s-1NFSS\s0 codes map to which fonts, see the log file
(pro tip: run \fBautoinst\fR with the \fI\-dryrun\fR option
to check the chosen mapping beforehand).
The \fI\-nfssweight\fR and \fI\-nfsswidth\fR command-line options can be used
to finetune the mapping between \s-1NFSS\s0 codes and fonts.
.PP
To access specific weights or widths,
one can always use the \f(CW\*(C`\efontseries\*(C'\fR command with the full series name
(i.e., \f(CW\*(C`\efontseries{demibold}\eselectfont\*(C'\fR).
.SH "COMMAND-LINE OPTIONS"
.IX Header "COMMAND-LINE OPTIONS"
\&\fBautoinst\fR tries hard to do The Right Thing (\s-1TM\s0) by default,
so you usually won't need these options;
but most aspects of its operation can be fine-tuned if you want to.
.PP
You may use either one or two dashes before options,
and option names may be shortened to a unique prefix
(e.g., \fB\-encoding\fR may be abbreviated to \fB\-enc\fR or even \fB\-en\fR,
but \fB\-e\fR is ambiguous (it may mean either \fB\-encoding\fR or \fB\-extra\fR)).
.IP "\fB\-version\fR" 4
.IX Item "-version"
Print \fBautoinst\fR's version number and exit.
.IP "\fB\-help\fR" 4
.IX Item "-help"
Print a (relatively) short help text and exit.
.IP "\fB\-dryrun\fR" 4
.IX Item "-dryrun"
Don't generate output; just parse input fonts and write
a log file saying what \fBautoinst\fR would have done.
.IP "\fB\-logfile\fR=\fIfilename\fR" 4
.IX Item "-logfile=filename"
Write log data to \fIfilename\fR instead of the default \fI<fontfamily>.log\fR.
If the file already exists, \fBautoinst\fR appends to it;
it doesn't overwrite an existing file.
.IP "\fB\-verbose\fR" 4
.IX Item "-verbose"
Add more details to the log file.
.IP "\fB\-encoding\fR=\fIencoding[,encoding]\fR" 4
.IX Item "-encoding=encoding[,encoding]"
Generate the specified encoding(s) for the text fonts.
Multiple encodings may be specified as a comma-separated list
(without spaces!); the default choice of encodings is \*(L"\s-1OT1,LY1,T1\*(R".\s0
.Sp
For each specified encoding \s-1XYZ,\s0 \fBautoinst\fR will first see if there is
an encoding file \fI\s-1XYZ\s0.enc\fR in the current directory, and if found it will
use that; otherwise it will use one of its built-in encoding files.
Currently \fBautoinst\fR comes with support for the \s-1OT1, T1/TS1, LY1, LGR,
T2A/B/C\s0 and T3/TS3 encodings.
(These files are called \fIfontools_ot1.enc\fR etc. to avoid name clashes
with other packages; the \*(L"fontools_\*(R" prefix may be omitted.)
.IP "\fB\-ts1\fR/\fB\-nots1\fR" 4
.IX Item "-ts1/-nots1"
Control the creation of TS1\-encoded fonts. The default is \fB\-ts1\fR
if the text encodings (see \fI\-encoding\fR above) include T1,
\&\fB\-nots1\fR otherwise.
.IP "\fB\-serif\fR/\fB\-sanserif\fR/\fB\-typewriter\fR" 4
.IX Item "-serif/-sanserif/-typewriter"
Install the font as a serif, sanserif or typewriter font, respectively.
This changes how you access the font in LaTeX:
with \f(CW\*(C`\ermfamily\*(C'\fR/\f(CW\*(C`\etextrm\*(C'\fR, \f(CW\*(C`\esffamily\*(C'\fR/\f(CW\*(C`\etextsf\*(C'\fR
or \f(CW\*(C`\ettfamily\*(C'\fR/\f(CW\*(C`\etexttt\*(C'\fR.
.Sp
Installing the font as a typewriter font will cause two further changes:
it will \- by default \- turn off the use of f\-ligatures
(though this can be overridden with the \fI\-ligatures\fR option),
and it will disable hyphenation for this font.
This latter effect cannot be disabled in \fBautoinst\fR;
if you want typewriter text to be hyphenated, use the \fIhyphenat\fR package.
.Sp
If none of these options is specified, \fBautoinst\fR tries to guess:
if the font's filename contains the string \*(L"mono\*(R"
or if the field \f(CW\*(C`isFixedPitch\*(C'\fR in the font's \fIpost\fR table is True,
it will select \fB\-typewriter\fR;
else if the filename contains \*(L"sans\*(R" it selects \fB\-sanserif\fR;
and otherwise it will opt for \fB\-serif\fR.
.IP "\fB\-lining\fR/\fB\-nolining\fR" 4
.IX Item "-lining/-nolining"
Control the creation of fonts with lining figures. The default is
\&\fB\-lining\fR.
.IP "\fB\-oldstyle\fR/\fB\-nooldstyle\fR" 4
.IX Item "-oldstyle/-nooldstyle"
Control the creation of fonts with oldstyle figures. The default is
\&\fB\-oldstyle\fR.
.IP "\fB\-proportional\fR/\fB\-noproportional\fR" 4
.IX Item "-proportional/-noproportional"
Control the creation of fonts with proportional figures. The default is
\&\fB\-proportional\fR.
.IP "\fB\-tabular\fR/\fB\-notabular\fR" 4
.IX Item "-tabular/-notabular"
Control the creation of fonts with tabular figures. The default is
\&\fB\-tabular\fR.
.IP "\fB\-smallcaps\fR/\fB\-nosmallcaps\fR" 4
.IX Item "-smallcaps/-nosmallcaps"
Control the creation of small caps fonts. The default is
\&\fB\-smallcaps\fR.
.IP "\fB\-swash\fR/\fB\-noswash\fR" 4
.IX Item "-swash/-noswash"
Control the creation of swash fonts. The default is \fB\-swash\fR.
.IP "\fB\-titling\fR/\fB\-notitling\fR" 4
.IX Item "-titling/-notitling"
Control the creation of titling families. The default is \fB\-titling\fR.
.IP "\fB\-superiors\fR/\fB\-nosuperiors\fR" 4
.IX Item "-superiors/-nosuperiors"
Control the creation of fonts with superior characters.
The default is \fB\-superiors\fR.
.IP "\fB\-noinferiors\fR" 4
.IX Item "-noinferiors"
.PD 0
.IP "\fB\-inferiors\fR [= \fBnone\fR | \fBauto\fR | \fBsubs\fR | \fBsinf\fR | \fBdnom\fR ]" 4
.IX Item "-inferiors [= none | auto | subs | sinf | dnom ]"
.PD
The OpenType standard defines several kinds of digits that might be used
as inferiors or subscripts: \*(L"Subscripts\*(R" (OpenType feature \*(L"subs\*(R"),
\&\*(L"Scientific Inferiors\*(R" (\*(L"sinf\*(R"), and \*(L"Denominators\*(R" (\*(L"dnom\*(R").
This option allows the user to determine which of these styles \fBautoinst\fR
should use for the inferior characters.
Alternatively, the value \*(L"auto\*(R" tells \fBautoinst\fR to use the first value
in \*(L"sinf\*(R", \*(L"subs\*(R" or \*(L"dnom\*(R" that is supported by the font.
Saying just \fB\-inferiors\fR is equivalent to \fB\-inferiors=auto\fR;
otherwise the default is \fB\-noinferiors\fR.
.Sp
\&\fIIf you specify a style of inferiors that isn't present in the font,
\&\f(BIautoinst\fI will fall back to its default behaviour of not creating fonts
with inferiors at all; it won't try to substitute one of the other styles.\fR
.IP "\fB\-fractions\fR/\fB\-nofractions\fR" 4
.IX Item "-fractions/-nofractions"
Control the creation of fonts with numerators and denominators.
The default is \fB\-nofractions\fR.
.IP "\fB\-ornaments\fR/\fB\-noornaments\fR" 4
.IX Item "-ornaments/-noornaments"
Control the creation of ornament fonts. The default is \fB\-ornaments\fR.
.IP "\fB\-ligatures\fR/\fB\-noligatures\fR" 4
.IX Item "-ligatures/-noligatures"
Some fonts create glyphs for the standard f\-ligatures (ff, fi, fl, ffi, ffl),
but don't provide a \*(L"liga\*(R" feature to access these.
This option tells \fBautoinst\fR to add extra \f(CW\*(C`LIGKERN\*(C'\fR rules to
the generated fonts to enable the use of these ligatures.
The default is \fB\-ligatures\fR,
unless the user specified the \fI\-typewriter\fR option.
.Sp
Specify \fB\-noligatures\fR to disable the generation of ligatures even for fonts
that do contain a \*(L"liga\*(R" feature.
.IP "\fB\-defaultlining\fR/\fB\-defaultoldstyle\fR" 4
.IX Item "-defaultlining/-defaultoldstyle"
.PD 0
.IP "\fB\-defaulttabular\fR/\fB\-defaultproportional\fR" 4
.IX Item "-defaulttabular/-defaultproportional"
.PD
Tell \fBautoinst\fR which figure style is the current font family's default
(i.e., which figures you get when you don't specify any OpenType features).
.Sp
\&\fIDon't use these options unless you are certain you need them!\fR
They are only needed for fonts that don't provide OpenType features
for their default figure style; and even in that case,
\&\fBautoinst\fR's default values (\fB\-defaultlining\fR and \fB\-defaulttabular\fR)
are usually correct.
.IP "\fB\-nofigurekern\fR" 4
.IX Item "-nofigurekern"
Some fonts provide kerning pairs for tabular figures.
This is very probably not what you want
(e.g., numbers in tables won't line up exactly).
This option adds extra \fI \-\-ligkern\fR options
to the commands for \fIotftotfm\fR to suppress such kerns.
Note that this option leads to very long commands (it adds
one hundred \fI \-\-ligkern\fR options), which may cause problems on some systems.
.IP "\fB\-nfssweight\fR=\fIcode\fR=\fIweight\fR, \fB\-nfsswidth\fR=\fIcode\fR=\fIwidth\fR" 4
.IX Item "-nfssweight=code=weight, -nfsswidth=code=width"
Map the \s-1NFSS\s0 code \fIcode\fR to the given weight or width,
overriding the built-in tables.
Each of these options may be given multiple times,
to override more than one \s-1NFSS\s0 code.
Example: to map the \*(L"ul\*(R" code to the \*(L"Thin\*(R" weight,
use \f(CW\*(C`\-nfssweight=ul=thin\*(C'\fR.
To inhibit the use of the \*(L"ul\*(R" code completely,
use \f(CW\*(C`\-nfssweight=ul=\*(C'\fR.
.IP "\fB\-extra\fR=\fItext\fR" 4
.IX Item "-extra=text"
Append \fItext\fR as extra options to the command lines for \fIotftotfm\fR.
To prevent \fItext\fR from accidentily being interpreted as options
to \fBautoinst\fR, it should be properly quoted.
.IP "\fB\-manual\fR" 4
.IX Item "-manual"
Manual mode; for users who want to post-process the generated files
and commands. By default, \fBautoinst\fR immediately executes all
\&\fIotftotfm\fR commands it generates;
in manual mode, these are instead written to a file \fIautoinst.bat\fR.
Furthermore it tells \fIotftotfm\fR to generate human readable (and editable)
\&\fIpl/vpl\fR files instead of the default \fItfm/vf\fR ones,
and to place all generated files in a subdirectory \f(CW\*(C`./autoinst_output/\*(C'\fR
of the current directory, rather than install them into your TeX installation.
.Sp
When using this option, you need to execute the following manual steps after
\&\fBautoinst\fR has finished:
.RS 4
.IP "\- run \fIpltotf\fR and \fIvptovf\fR on the generated \fIpl\fR and \fIvf\fR files, to convert them to \fItfm/vf\fR format;" 2
.IX Item "- run pltotf and vptovf on the generated pl and vf files, to convert them to tfm/vf format;"
.PD 0
.IP "\- move all generated files to a proper \s-1TEXMF\s0 tree, and, if necessary, update the filename database;" 2
.IX Item "- move all generated files to a proper TEXMF tree, and, if necessary, update the filename database;"
.ie n .IP "\- tell TeX about the new \fImap\fR file (usually by running ""updmap"" or similar)." 2
.el .IP "\- tell TeX about the new \fImap\fR file (usually by running \f(CWupdmap\fR or similar)." 2
.IX Item "- tell TeX about the new map file (usually by running updmap or similar)."
.RE
.RS 4
.PD
.Sp
Note that some options (\fI\-target\fR, \fI\-vendor\fR and \fI\-typeface\fR,
\&\fI\-[no]updmap\fR) are meaningless, and hence ignored, in manual mode.
.RE
.IP "\fB\-target\fR=\fI\s-1DIRECTORY\s0\fR" 4
.IX Item "-target=DIRECTORY"
Install all generated files into the \s-1TEXMF\s0 tree at \fI\s-1DIRECTORY\s0\fR.
.Sp
By default, \fBautoinst\fR searches the \f(CW$TEXMFLOCAL\fR and \f(CW$TEXMFHOME\fR trees
and installs all files into the first user-writable \s-1TEXMF\s0 tree it finds.
If \fBautoinst\fR cannot find such a user-writable directory
(which shouldn't happen, since \f(CW$TEXMFHOME\fR is supposed to be user-writable)
it will print a warning message and put all files into the subdirectory
\&\f(CW\*(C`./autoinst_output/\*(C'\fR of the current directory.
It's then up to the user to move the generated files to a better location
and update all relevant databases
(usually by calling \fItexhash\fR and \fIupdmap\fR).
.Sp
\&\fI\s-1WARNING:\s0\fR using this option may interfere with \fIkpathsea\fR and \fIupdmap\fR
(especially when the chosen directory is outside the standard \s-1TEXMF\s0 trees),
so using \fI\-target\fR will disable the automatic call to \fIupdmap\fR
(as if \fI\-noupdmap\fR had been given).
It is up to the user to manually update all databases (i.e., by calling
\&\fItexhash\fR and \fIupdmap\fR or similar).
.IP "\fB\-vendor\fR=\fI\s-1VENDOR\s0\fR" 4
.IX Item "-vendor=VENDOR"
.PD 0
.IP "\fB\-typeface\fR=\fI\s-1TYPEFACE\s0\fR" 4
.IX Item "-typeface=TYPEFACE"
.PD
These options are equivalent to \fIotftotfm\fR's \fI \-\-vendor\fR and \fI \-\-typeface\fR
options: they change the \*(L"vendor\*(R" and \*(L"typeface\*(R" parts of the names of the
subdirectories in the \s-1TEXMF\s0 tree where generated files will be stored.
The default values are \*(L"lcdftools\*(R" and the font's FontFamily name.
.Sp
Note that these options change \fIonly\fR directory names,
not the names of any generated files.
.IP "\fB\-updmap\fR/\fB\-noupdmap\fR" 4
.IX Item "-updmap/-noupdmap"
Control whether or not \fIupdmap\fR is called after the last call to \fIotftotfm\fR.
The default is \fB\-updmap\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Eddie Kohler's \fBTypeTools\fR (\fIhttp://www.lcdf.org/type\fR).
.PP
\&\fBPerl\fR can be obtained from \fIhttp://www.perl.org\fR;
it is included in most Linux distributions.
For Windows, try ActivePerl (\fIhttp://www.activestate.com\fR)
or Strawberry Perl (\fIhttp://strawberryperl.com\fR).
.PP
\&\fBXeTeX\fR (\fIhttp://www.tug.org/xetex\fR) and
\&\fBLuaTeX\fR (\fIhttp://www.luatex.org\fR)
are Unicode-aware TeX engines that can use OpenType fonts directly,
without any (La)TeX\-specific support files.
.PP
The \fBFontPro\fR project (\fIhttps://github.com/sebschub/FontPro\fR)
offers very complete LaTeX support (even for typesetting maths) for
Adobe's Minion Pro, Myriad Pro and Cronos Pro font families.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Penninga (\fImarcpenninga@gmail.com\fR)
.PP
When sending a bug report, please give as much relevant information as
possible; this usually includes (but may not be limited to) the log file
(please add the \fI\-verbose\fR command-line option, for extra info).
If you see any error messages, please include these \fIverbatim\fR;
don't paraphase.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005\-2020 Marc Penninga.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published
by the Free Software Foundation, either version 2 of the License,
or (at your option) any later version.
A copy of the text of the \s-1GNU\s0 General Public License is included in
the \fIfontools\fR distribution; see the file \fIGPLv2.txt\fR.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the
\&\s-1GNU\s0 General Public License for more details.
.SH "VERSION"
.IX Header "VERSION"
This document describes \fBautoinst\fR version 20200511.
.SH "RECENT CHANGES"
.IX Header "RECENT CHANGES"
(See the source for the full story, all the way back to 2005.)
.IP "\fI2020\-05\-11\fR" 12
.IX Item "2020-05-11"
When present, use encoding files in the current working directory
in preference of the ones that come with \fBautoinst\fR.
Changed the way ornament fonts are created; ornament glyphs are now
always included in the position chosen by the font's designer.
.IP "\fI2020\-04\-28\fR" 12
.IX Item "2020-04-28"
Fix a bug where the first font argument would be mistaken for
an argument to \fI\-inferiors\fR.
.IP "\fI2020\-01\-29\fR" 12
.IX Item "2020-01-29"
Don't create empty subdirectories in the target \s-1TEXMF\s0 tree.
.IP "\fI2019\-11\-18\fR" 12
.IX Item "2019-11-18"
Fine-tuned calling of \fIkpsewhich\fR on Windows (patch by Akira Kakuto).
The font info parsing now also recognises numerical weights, e.g. in Museo.
.IP "\fI2019\-10\-29\fR" 12
.IX Item "2019-10-29"
The generated style files now use T1 as the default text encoding.
.IP "\fI2019\-10\-27\fR" 12
.IX Item "2019-10-27"
The mapping in \fIfd\fR files between font series and standard \s-1NFSS\s0 attributes
now uses the new \fIalias\fR function instead of \fIssub\fR (based on code by
Frank Mittelbach).
The way \fIotftotfm\fR is called was changed to work around a Perl/Windows bug;
the old way might cause the process to hang.
Using the \fI\-target\fR option now implies \fI\-noupdmap\fR, since choosing
a non-standard target directory interferes with kpathsea/texhash and updmap.
.IP "\fI2019\-10\-01\fR" 12
.IX Item "2019-10-01"
Handle \fI\-target\fR directories with spaces in their path names.
Tweaked messages and logs to make them more useful to the user.
.IP "\fI2019\-07\-12\fR" 12
.IX Item "2019-07-12"
Replaced single quotes in calls to \fIotfinfo\fR with double quotes,
as they caused problems on Windows 10.
.IP "\fI2019\-06\-25\fR" 12
.IX Item "2019-06-25"
.RS 12
.PD 0
.IP "\-" 3
.PD
Added the \fI\-mergeweights\fR and \fI\-mergeshapes\fR options,
and improved \fI\-mergewidths\fR.
.IP "\-" 3
Improved the parsing of fonts' widths and weights.
.IP "\-" 3
Improved the mapping of widths and weights to \s-1NFSS\s0 codes.
.IP "\-" 3
Changed logging code so that that results of font info parsing
are always logged, even (especially!) when parsing fails.
.IP "\-" 3
Added a warning when installing fonts from multiple families.
.IP "\-" 3
Added simple recognition for sanserif and typewriter fonts.
.IP "\-" 3
Fixed error checking after calls to \fIotfinfo\fR
(\fBautoinst\fR previously only checked whether \f(CW\*(C`fork()\*(C'\fR was successful,
not whether the actual call to \fIotfinfo\fR worked).
.IP "\-" 3
Fixed a bug in the \fI\-inferiors\fR option;
when used without a (supposedly optional) value,
it would silently gobble the next option instead.
.RE
.RS 12
.RE
.IP "\fI2019\-05\-22\fR" 12
.IX Item "2019-05-22"
Added the \fImainfont\fR option to the generated \fIsty\fR files.
Prevented hyphenation for typewriter fonts
(added \f(CW\*(C`\ehyphenchar\efont=\-1\*(C'\fR to the \f(CW\*(C`\eDeclareFontFamily\*(C'\fR declarations).
Added the \fI\-version\fR option.
.IP "\fI2019\-05\-17\fR" 12
.IX Item "2019-05-17"
Changed the way the \fI\-ligatures\fR option works:
\&\fI\-ligatures\fR enables f\-ligatures (even without a \*(L"liga\*(R" feature),
\&\fI\-noligatures\fR now disables f\-ligatures (overriding a \*(L"liga\*(R" feature).
.IP "\fI2019\-05\-11\fR" 12
.IX Item "2019-05-11"
Separate small caps families are now also recognised when the family name
ends with \*(L"\s-1SC\*(R"\s0 (previously \fBautoinst\fR only looked for \*(L"SmallCaps\*(R").
.IP "\fI2019\-04\-22\fR" 12
.IX Item "2019-04-22"
Fixed a bug in the generation of swash shapes.
.IP "\fI2019\-04\-19\fR" 12
.IX Item "2019-04-19"
Fixed a bug that affected \-mergesmallcaps with multiple encodings.
.IP "\fI2019\-04\-16\fR" 12
.IX Item "2019-04-16"
Added the <\-mergesmallcaps> option, to handle cases where
the small caps fonts are in separate font families.
Titling shape is now treated as a separate family instead of a distinct shape;
it is generated only for fonts with the 'titl' feature.
Only add f\-ligatures to fonts when explicitly asked to (\fI\-ligatures\fR).
.IP "\fI2019\-04\-11\fR" 12
.IX Item "2019-04-11"
Tried to make the log file more relevant.
Added the \fI\-nfssweight\fR and \fI\-nfsswidth\fR options,
and finetuned the automatic mapping between fonts and \s-1NFSS\s0 codes.
Changed the name of the generated log file to \fI<fontfamily>.log\fR,
and revived the \fI\-logfile\fR option to allow overriding this choice.
Made \fI\-mergewidths\fR the default (instead of \fI\-nomergewidths\fR).
.IP "\fI2019\-04\-01\fR" 12
.IX Item "2019-04-01"
Fine-tuned the decision where to put generated files;
in particular, create \f(CW$TEXMFHOME\fR if it doesn't already exist
and \f(CW$TEXMFLOCAL\fR isn't user-writable.
.Sp
In manual mode, or when we can't find a user-writable \s-1TEXMF\s0 tree,
put all generated files into a subdirectory \f(CW\*(C`./autoinst_output/\*(C'\fR
instead of all over the current working directory.
.Sp
Added \*(L"auto\*(R" value to the \fIinferiors\fR option,
to tell \fBautoinst\fR to use whatever inferior characters are available.
.IP "\fI2019\-03\-14\fR" 12
.IX Item "2019-03-14"
Overhauled the mapping of fonts (more specifically of weights and widths;
the mapping of shapes didn't change) to \s-1NFSS\s0 codes.
Instead of inventing our own codes to deal with every possible weight
and width out there, we now create \*(L"long\*(R" codes based on the names
in the font metadata.
Then we add \*(L"ssub\*(R" rules to the \fIfd\fR files to map the standard \s-1NFSS\s0 codes
to our fancy names (see the section \fB\s-1NFSS\s0 codes\fR;
based on discussions with Frank Mittelbach and Bob Tennent).
