.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OT2KPX 1"
.TH OT2KPX 1 "2020-05-11" "fontools" "Marc Penninga"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ot2kpx \- extract kerning information from OpenType fonts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBot2kpx\fR [ \fI\-afm\fR | \fI\-kpx\fR | \fI\-lua\fR ] \fB<fontfile>\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBot2kpx\fR extract the kerning data from OpenType fonts and prints it
to \f(CW\*(C`stdout\*(C'\fR, either in Adobe's \s-1KPX\s0 format (for adding to an \fIafm\fR file)
or as a Luatex custom feature, for use with the \f(CW\*(C`\edirectlua\*(C'\fR command.
.SH "OPTIONS AND ARGUMENTS"
.IX Header "OPTIONS AND ARGUMENTS"
.IP "\fB\-help\fR" 4
.IX Item "-help"
Print a short help text and exit.
.IP "\fB\-version\fR" 4
.IX Item "-version"
Print \fBot2kpx\fR's version and exit.
.IP "\fB\-afm\fR, \fB\-kpx\fR" 4
.IX Item "-afm, -kpx"
Output the kerning data in Adobe's \s-1KPX\s0 format, as used in \fIafm\fR files.
This is the default output format.
.IP "\fB\-lua\fR" 4
.IX Item "-lua"
Output the kerning data as a Luatex custom font feature,
to be included in a \f(CW\*(C`\edirectlua\*(C'\fR command.
.IP "\fB<fontfile>\fR" 4
.IX Item "<fontfile>"
The OpenType font (both \fIotf\fR and \fIttf\fR format are supported).
.SH "RESTRICTIONS"
.IX Header "RESTRICTIONS"
.IP "\fB\-\fR" 4
.IX Item "-"
\&\fBot2kpx\fR doesn't implement all of the OpenType specification.
Things that are missing include: support for font files containing
multiple fonts, LookupTables with LookupTypes other than 2,
\&\*(L"kern\*(R" tables with format other than 0 and ValueRecords with
other types of data than just XAdvance data.
.Sp
Most of these limitations won't matter, since the missing features
are rare (the only fonts I know of that use them are the non-western fonts
that come with Adobe Reader). Furthermore, many of these features define
(according to the OpenType specification) \fI\*(L"subtle, device-dependent
adjustments at specific font sizes or device resolutions\*(R"\fR;
since there's no way to express such adjustments in \fIafm\fR format,
ignoring them seems to be the only option anyway.
.IP "\fB\-\fR" 4
.IX Item "-"
\&\fBot2kpx\fR collects kerning data first from the \*(L"kern\*(R" table, then from
all LookupTables associated with the \*(L"kern\*(R" feature; if a kerning pair
occurs multiple times, the first value seen is chosen.
There are (or may be) several issues with this approach:
.RS 4
.IP "\-" 4
The OpenType specification says that fonts in \fIotf\fR format shouldn't
use the \*(L"kern\*(R" table at all, just the lookups from the \*(L"\s-1GPOS\*(R"\s0 table.
Many such fonts do, however, contain a \*(L"kern\*(R" table, but no \*(L"\s-1GPOS\*(R"\s0 table;
so we use the \*(L"kern\*(R" table anyway.
.IP "\-" 4
Instead of reading all LookupTables, it might be better to let the user
specify a script and language and process only the LookupTables for
those values.
However, at least in the fonts I checked, all script/language combinations
eventually point to the \fIsame\fR \*(L"kern\*(R" LookupTables, so this approach
wouldn't make any difference (apart from further complicating the code).
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Marc Penninga <marcpenninga@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005\-2020 Marc Penninga.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published
by the Free Software Foundation, either version 2 of the License,
or (at your option) any later version.
A copy of the \s-1GNU\s0 General Public License is included with \fBot2kpx\fR;
see the file \fIGPLv2.txt\fR.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
See the \s-1GNU\s0 General Public License for more details.
.SH "VERSION"
.IX Header "VERSION"
This document describes \fBot2kpx\fR version 20200511.
.SH "RECENT CHANGES"
.IX Header "RECENT CHANGES"
(See the source code for the rest of the story.)
.IP "\fI2019\-05\-20\fR" 12
.IX Item "2019-05-20"
Added the \fI\-version\fR option.
.IP "\fI2019\-04\-15\fR" 12
.IX Item "2019-04-15"
Added the \fI\-lua\fR command-line option to get output in Luatex's
custom feature format.
