################################# Aliases ##############################################
# This section is for aliases that are useful for regular commands

# applications
alias v='nvim'                            # vim
alias dragon='dragon-drag-and-drop'
alias ex="exa --color automatic -a"
alias exl="exa --color automatic -alh --git"

# system tools
alias cleanmake='sudo make clean install' # quick alias for make clean install
alias unmake='sudo make uninstall'        # uninstall make files
alias lsa='ls -a --color=auto'
alias pfetch='~/repos/pfetch/pfetch'
alias xrefresh='xrdb ~/.Xresources'
alias ffs='sudo !!'
alias tlmgr='$HOME/.config/texlive/2020/texmf-dist/scripts/texlive/tlmgr.pl --usermode'
alias grep='grep --color'
alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes

# git management
function lazygit() {
    git add .
    git commit -a -m "$1"
    git push
}

function configupdate() {
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME add $1
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME commit -a -m "$2"
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME push
}

# merge files
function filemerge() {
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile=$1 $2 $3
}

# for package management (pacman)
alias p='sudo pacman'
alias ps='sudo pacman -S'
alias psearch='pacman -Ss'
alias pup='sudo pacman -Syu'
alias porp='sudo pacman -Rs $(pacman -Qtdq)'
alias pr='sudo pacman -Rns'
alias pexist='pacman -Qs'

# for dotfile management
alias config="/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME"

# for ls colors
alias ls='ls --color=auto'

# for nvim to open tabs
alias vt='nvim -p' # open in tabs
alias vr='nvim -S' # open saved session
alias vhelp='nvim +help' # open help file

# change visual for crontab
alias crontab='export VISUAL=nvim; crontab'

# set wallpaper
function setwallpaper() {
    qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript '
    var allDesktops = desktops();
    print (allDesktops);
    for (i=0;i<allDesktops.length;i++) {{
        d = allDesktops[i];
        d.wallpaperPlugin = "org.kde.image";
        d.currentConfigGroup = Array("Wallpaper",
                                     "org.kde.image",
                                     "General");
        d.writeConfig("Image", "file:///home/xllvr/.config/wall.png")
    }}
'
}

# rclone sync
alias quicksync='rclone sync --include-from $HOME/.config/rclone/filter-file.txt /GDrive GDrive:'
alias quickdown='rclone copy --include-from $HOME/.config/rclone/filter-file.txt GDrive: /GDrive'

# mbsync
# alias mbsync="mbsync -c \"$HOME/.config/isync/mbsyncrc\""

################################# NNN Stuff ##############################################
n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    # export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@" -H -e

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}


